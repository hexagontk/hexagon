/*
 * Check usage information at: http://hexagontk.com/gradle/#application
 */

import java.nio.file.Files

apply(plugin: "application")

classes.dependsOn("buildInfo")

application {
    mainClass = findProperty("applicationClass")
    final String options = findProperty("options")
    if (options != null)
        applicationDefaultJvmArgs = options.split(" ").toList()
}

tasks.register("buildInfo") {
    group = "build"
    description =
        "Add configuration file (`META-INF/build.properties`) with build variables to the package."

    final String buildPath = layout.buildDirectory.get().asFile.absolutePath
    final String projectName = project.name
    final String projectVersion = project.version.toString()
    final String projectGroup = project.group
    final String projectDescription = project.description

    doLast {
        file("$buildPath/resources/main/META-INF").mkdirs()
        file("$buildPath/resources/main/META-INF/build.properties").write("""
        project=$rootProject.name
        module=$projectName
        version=$projectVersion
        group=$projectGroup
        description=$projectDescription
    """.stripIndent ())
    }
}

tasks.register("jarAll", Jar) {
    group = "distribution"
    description = "Create a JAR with all dependencies, and the application main class set up."
    dependsOn("jar")

    archiveBaseName.set("${archiveBaseName.orNull}-all")
    duplicatesStrategy = DuplicatesStrategy.INCLUDE

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    } {
        exclude("META-INF/*.RSA", "META-INF/*.SF", "META-INF/*.DSA")
    }
    with(jar)

    doFirst {
        manifest {
            attributes("Main-Class": application.mainClass)
        }
    }
}

tasks.register("jpackage") {
    group = "distribution"
    description = "Create a jpackage distribution including a JVM with a subset of the modules."
    dependsOn("jarAll")

    doLast {
        final java.nio.file.Path buildPath = layout.buildDirectory.get().asFile.toPath()
        final String name = project.name
        final String version = project.version
        final File tmp = buildPath.resolve("jpackage").toFile()

        final String options = findProperty("options")
        final String icon = findProperty("icon")
        final String modules = findProperty("modules")
        final String jarAllName = "$name-all-${version}.jar"
        final java.nio.file.Path jarAll = buildPath.resolve("libs/$jarAllName")
        final java.nio.file.Path jpackageJar = buildPath.resolve("jpackage/$jarAllName")

        List<String> command = [
            "${System.getenv("JAVA_HOME")}/bin/jpackage",
            "--type", "app-image",
            "--app-version", version,
            "--description", project.description ?: name,
            "--name", name,
            "--input", tmp.absolutePath,
            "--main-jar", jarAllName
        ]

        if (modules != null)
            command += [ "--add-modules", modules ]

        if (options != null)
            command += [ "--java-options", options ]

        if (icon != null)
            command += [ "--icon", icon ]

        tmp.mkdirs()
        buildPath.resolve(name).toFile().deleteDir()
        jpackageJar.toFile().delete()
        Files.copy(jarAll, jpackageJar)

        exec {
            workingDir(buildPath.toFile())
            commandLine(command)
        }
    }
}

tasks.register("zipJpackage", Zip) {
    group = "distribution"
    description = "Compress Jpackage distribution in a single file."
    dependsOn("jpackage")

    final java.nio.file.Path buildPath = layout.buildDirectory.get().asFile.toPath()
    from(buildPath.resolve(project.name).toFile())
    archiveFileName.set("${project.name}-${project.version}-jpackage.zip")
    destinationDirectory.set(buildPath.resolve("distributions").toFile())
}

tasks.register("jlink", Exec) {
    group = "distribution"
    description = "Create an application distribution based on a jlink generated JRE."
    dependsOn("jarAll")

    final String projectName = project.name
    final String jarFileName = "${project.name}-all-${project.version}.jar"
    final String modules = findProperty("modules") ?: "java.logging"
    final String buildPath = layout.buildDirectory.get().asFile.absolutePath

    commandLine(
        [
            "jlink",
            "--add-modules", modules,
            "--strip-debug",
            "--no-header-files",
            "--no-man-pages",
            "--output", "$buildPath/$projectName",
        ]
    )

    doLast {
        copy {
            from("$buildPath/libs")
            include(jarFileName)
            into("$buildPath/$projectName/lib")
        }

        final File launcher = file("$buildPath/$projectName/bin/$projectName")
        launcher.write("""\
            #!/usr/bin/env sh
            set -e
            appRoot="\$(dirname \$0)"
            "\$appRoot/java" -jar "\$appRoot/../lib/$jarFileName"
        """.stripIndent())
        launcher.setExecutable(true)
    }
}

tasks.register("zipJlink", Zip) {
    group = "distribution"
    description = "Compress JRE distribution in a single file."
    dependsOn("jlink")

    final java.nio.file.Path buildPath = layout.buildDirectory.get().asFile.toPath()
    from(buildPath.resolve(project.name).toFile())
    archiveFileName.set("${project.name}-${project.version}-jlink.zip")
    destinationDirectory.set(buildPath.resolve("distributions").toFile())
}

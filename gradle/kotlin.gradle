/*
 * Check usage information at: http://hexagontk.com/gradle/#kotlin
 */

apply(plugin: "idea")
apply(plugin: "eclipse")
apply(plugin: "kotlin")
apply(plugin: "jacoco")
apply(plugin: "maven-publish")

defaultTasks("build")

java {
    sourceCompatibility = JavaVersion.toVersion(findProperty("jvmTarget") ?: "21")
    targetCompatibility = sourceCompatibility
}

idea {
    module {
        setDownloadSources(true)
        setDownloadJavadoc(true)
    }
}

eclipse {
    classpath {
        setDownloadSources(true)
        setDownloadJavadoc(true)
    }
}

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    implementation("org.jetbrains.kotlin:kotlin-stdlib")

    testImplementation("org.jetbrains.kotlin:kotlin-test-junit5")
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
}

sourceSets.main.java.srcDirs.add(sourceSets.main.kotlin.srcDirs)
tasks.compileJava.destinationDirectory.set(tasks.compileKotlin.destinationDirectory)

tasks.compileKotlin.kotlinOptions.jvmTarget = tasks.compileJava.targetCompatibility

tasks.compileTestKotlin.compilerOptions.jvmTarget = tasks.compileKotlin.compilerOptions.jvmTarget
tasks.compileTestKotlin.compilerOptions.apiVersion = tasks.compileKotlin.compilerOptions.apiVersion

clean {
    delete("log", "out", ".vertx", "file-uploads", "kotlin-js-store", ".kotlin")
    delete(
        "$rootDir/build",
        "$rootDir/log",
        "$rootDir/out",
        "$rootDir/.vertx",
        "$rootDir/file-uploads",
        "$rootDir/kotlin-js-store"
    )
}

tasks.register("cleanAll", Delete) {
    dependsOn("clean")

    delete(
        fileTree(rootDir) { include("**/*.log") },
        fileTree(rootDir) { include("**/*.hprof") },
        fileTree(rootDir) { include("**/*.build_artifacts.txt") },
        fileTree(rootDir) { include("**/.attach_pid*") },
        fileTree(rootDir) { include("**/hs_err_pid*") }
    )
}

test {
    exclude("**/*IT.*")
}

tasks.register("verify", Test) {
    group = "verification"
    description = "Runs integration tests."

    shouldRunAfter(test)
    include("**/*IT.*")
    testClassesDirs = testing.suites.test.sources.output.classesDirs
    classpath = testing.suites.test.sources.runtimeClasspath
}

check.dependsOn("test", "verify")

// Show useful testing information while running tests
tasks.withType(Test).configureEach { testTask ->
    testTask.useJUnitPlatform()
    testTask.systemProperties(project.getProperties().findAll { it.value instanceof String })
    testTask.systemProperty("file.encoding", "utf-8")
    testTask.jvmArgs('--enable-preview', '-Xshare:off')

    testTask.testLogging {
        if (logger.isInfoEnabled())
            events("skipped", "failed", "standardOut", "standardError")
        else
            events("skipped", "failed")
    }
}

jacoco {
    toolVersion = "0.8.12"
}

tasks.jacocoTestReport {
    dependsOn("check", "jacocoReportSources")

    reports {
        xml.required.set(true)
        html.required.set(true)
    }
}

build.dependsOn(tasks.jacocoTestReport)

tasks.register("jacocoReportSources") {
    group = "verification"
    description = "Add base directory to Kotlin sources (fix report for Kotlin coding standard)."

    doLast {
        final String basePackage = findProperty("basePackage")
        if (basePackage != null) {
            final String basePackageDirectory = basePackage.tr(".", "/")
            final String relativePackageDirectory = "build/jacoco/src/$basePackageDirectory"
            file(relativePackageDirectory).mkdirs()

            copy {
                from(project.sourceSets.main.allSource)
                into(relativePackageDirectory)
                include("*.kt")
            }
        }
    }
}

tasks.register("sourcesJar", Jar) {
    group = "distribution"
    description = "Create a jar file with the source code files."
    dependsOn(classes)

    archiveClassifier.set("sources")
    from(project.sourceSets.main.allSource)
}

tasks.register("testJar", Jar) {
    group = "distribution"
    description = "Create a jar file with the test classes."
    dependsOn(testClasses)

    archiveClassifier.set("test")
    from(project.sourceSets.test.output.classesDirs)
}

tasks.withType(Zip).each { zipTask ->
    zipTask.duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from(components.java)
            artifact(sourcesJar) // To publish in Maven Central, the package need to include sources
        }
    }
}
